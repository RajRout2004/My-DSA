class Solution {
public:
    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {
        // Calculate the initial sum of even numbers in nums
        int evenSum = 0;
        for (int num : nums) {
            if (num % 2 == 0) {
                evenSum += num;
            }
        }
        
        vector<int> result;
        result.reserve(queries.size());
        
        // Process each query
        for (const auto& query : queries) {
            int val = query[0];
            int index = query[1];
            
            // If the current number at nums[index] is even, subtract it from evenSum
            if (nums[index] % 2 == 0) {
                evenSum -= nums[index];
            }
            
            // Update nums[index] by adding val
            nums[index] += val;
            
            // If the new number at nums[index] is even, add it to evenSum
            if (nums[index] % 2 == 0) {
                evenSum += nums[index];
            }
            
            // Store the current evenSum in the result
            result.push_back(evenSum);
        }
        
        return result;
    }
};
